generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  status    Status   @default(Admin)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topic[]
}

model Topic {
  id          String     @id @default(cuid())
  subjectType String
  name        String
  number      String
  adminId     String
  admin       Admin      @relation(fields: [adminId], references: [id])
  subTopics   SubTopic[]
  createdAt   DateTime   @default(now())
}

model SubTopic {
  id      String @id @default(cuid())
  name    String
  number  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  tests   Test[]
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests     Test[]
  status    Status   @default(Teacher)
}

model Student {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     Status   @default(Student)
  viewAccess Boolean  @default(false)

  scores        StudentScore[]
  assignedTests AssignedTest[]
}

model StudentScore {
  id          String   @id @default(cuid())
  studentId   String
  testId      String
  score       Int
  maxScore    Int
  testName    String   @default("Untitled Test")
  studentTest Json?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])
  test    Test    @relation(fields: [testId], references: [id])

  @@index([studentId])
  @@index([testId])
}

model Test {
  id          String    @id @default(cuid())
  title       String?
  timeLimit   Int?
  description String?
  score       String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  testTYpe    String?

  teacherId     String
  teacher       Teacher        @relation(fields: [teacherId], references: [id])
  tasks         Task[]
  studentScores StudentScore[]
  status        TestStatus     @default(PENDING)
  assignedTo    AssignedTest[]
  subTopicId    String?
  subTopic      SubTopic?      @relation(fields: [subTopicId], references: [id])
}

model AssignedTest {
  id         String   @id @default(uuid())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  test       Test     @relation(fields: [testId], references: [id])
  testId     String
  assignedAt DateTime @default(now())
}

model Task {
  id          String   @id @default(cuid())
  title       String
  number      String
  image       String?  @db.Text
  type        String?
  isSaved     Boolean? @default(false)
  userAnsewer Json?
  pairs       Json?
  answers     Json?
  testId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  test Test? @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum Status {
  Teacher
  Student
  Admin
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
