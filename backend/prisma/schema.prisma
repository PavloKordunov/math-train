generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests     Test[]
  status    Status   @default(Teacher)
}

model Student {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(Student)

  scores    StudentScore[]
  assignedTests AssignedTest[]
}

model StudentScore {
  id          String   @id @default(cuid())
  studentId   String
  testId      String
  score       Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])
  test    Test    @relation(fields: [testId], references: [id])

  @@index([studentId])
  @@index([testId])
}

model Test {
  id          String   @id @default(cuid())
  title       String
  timeLimit   Int
  description String?
  score       String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  tasks       Task[]  
  studentScores StudentScore[]
  status      TestStatus @default(PENDING)
  assignedTo  AssignedTest[]
}

model AssignedTest {
  id        String   @id @default(uuid())
  student   Student     @relation(fields: [studentId], references: [id])
  studentId String
  test      Test     @relation(fields: [testId], references: [id])
  testId    String
  assignedAt DateTime @default(now())
}

model Task {
  id          String   @id @default(cuid())
  title       String
  number      String
  image       String?  @db.Text  
  type        String?
  isSaved     Boolean? @default(false)
  userAnsewer Json?
  pairs       Json?
  answers     Json?
  testId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  test      Test @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum Status {
  Teacher
  Student
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
